# -*- coding: utf-8 -*-
"""whatsapp_chat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cTdXiRsoeZHeGrQpLd_LMcrl7iHtPUg-
"""

clean = open('_chat.txt','r+').read().replace('\n', ' ').replace('[', '\n')
#clean = clean.replace(']','/n')


#with open("converted.txt",'r+') as file:
#    file.truncate(0)
#    file.close()
file = open("converted.txt", "w")
am = file.write(clean)
file.close()

clean

with open("converted.txt", 'r') as file:
  lines = file.readlines()

import pandas as pd
filename="converted.txt"
df=pd.read_csv(filename,header=None,error_bad_lines=False,encoding='utf8', sep = ']')

df

df[1145:]

df.info()

value1 = df.at[40, 1]
value1

df.columns=['Date', 'Chat']

Message= df['Chat'].str.split(":", n = 1, expand = True)

len(Message[0].unique())



value110 = Message.at[47, 0]
val110 = Message.at[47, 1]
print(value110)
val110

date_time= df['Date'].str.split(",", n = 1, expand = True)
date_time

final_df = pd.concat([date_time, Message], axis=1, join='inner')
final_df



final_df.columns=['Date', 'Time', 'Member', 'Message']

final_df.head(50)

final_df_for_count = final_df.copy()

all_left = []
lennn=[]

for num in range(len(final_df_for_count)):
  ax=final_df_for_count['Member'][num:num+1]
  txt=ax.item()
  try:
    x = txt.find("left")
    if x != -1:
      lennn.append(num)
      final_df_for_count['Member'][num:num+1] = txt.replace(' left', '')
  except:
    print()

lennn

final_df_copy=final_df.copy()

final_df_copy['Message'].isna().sum()

final_df_copy=final_df_copy.dropna()
final_df_copy = final_df_copy.reset_index()
final_df_copy=final_df_copy.drop(columns='index')
final_df_copy['Message'].isna().sum()

final_df_copy.head(50)



len(final_df_copy)

all_poll = pd.DataFrame(columns=['poll'])
all_poll_member_name = pd.DataFrame(columns=['name'])
for num in range(len(final_df_copy)):
  ax=final_df_copy['Message'][num:num+1]
  txt=ax.item()
  if txt != None:
    x = txt.find("POLL:")
    if x != -1:
      all_poll.loc[len(all_poll)] = txt
      all_poll_member_name.loc[len(all_poll_member_name)] = final_df_copy['Member'][num:num+1].item()

all_poll

all_poll_member_name

latest_poll = pd.DataFrame(columns=['poll'])
latest_poll_member_name = pd.DataFrame(columns=['name'])

for x in range(1,6):
  latest_poll.loc[len(latest_poll)] = all_poll.iloc[-x].item().replace('‎OPTION:', ':')
  latest_poll_member_name.loc[len(latest_poll_member_name)] = all_poll_member_name.iloc[-x].item()

latest_poll= latest_poll['poll'].str.split(" ‎POLL: ", n = 1, expand = True)
latest_poll=latest_poll.drop(columns=0)

latest_poll_member_name

latest_poll.columns=['Question']
latest_poll

latest_poll= latest_poll['Question'].str.split(" : ", expand = True)

latest_poll

lis=['Question']

for n in range(1,len(latest_poll.columns)):
  n='Option'+str(n)
  lis.append(n)

latest_poll.columns=[lis]
latest_poll.fillna("N/A", inplace = True)
print(latest_poll.to_markdown())

latest_poll

fianl_poll = pd.concat([latest_poll_member_name, latest_poll], axis=1)
fianl_poll

array_temp=[]
for del_poll in range(len(all_poll)):
  poll_to_be_del=all_poll['poll'][del_poll:del_poll+1].item()
  for temp in range(len(final_df_copy)):
    searching=final_df_copy['Message'][temp:temp+1].item()
    if searching == poll_to_be_del:
      array_temp.append(temp)

array_temp

clean_df=final_df_copy.copy()

clean_df.drop(array_temp, inplace=True)
clean_df = clean_df.reset_index()
clean_df=clean_df.drop(columns='index')

all_deleted = []

for num in range(len(clean_df)):
  ax=clean_df['Message'][num:num+1]
  txt=ax.item()
  if txt != None:
    x = txt.find("deleted")
    if x != -1:
      all_deleted.append(num)

clean_df.drop(all_deleted, inplace=True)
clean_df = clean_df.reset_index()
clean_df=clean_df.drop(columns='index')
clean_df

all_omitted = []

for num in range(len(clean_df)):
  ax=clean_df['Message'][num:num+1]
  txt=ax.item()
  if txt != None:
    x = txt.find("omitted")
    if x != -1:
      all_omitted.append(num)

clean_df.drop(all_omitted, inplace=True)
clean_df = clean_df.reset_index()
clean_df=clean_df.drop(columns='index')
clean_df

clean_df.to_csv("clean_df")

from wordcloud import WordCloud
from wordcloud import ImageColorGenerator
from wordcloud import STOPWORDS
import matplotlib.pyplot as plt
import pandas as pd

text = " ".join(i for i in clean_df['Message'])
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.figure( figsize=(11,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
#plt.savefig('wordcloud.pdf')
wordcloud.to_file('wordcloud.png')

text = " ".join(i for i in clean_df['Message'])
#stopwords = set(STOPWORDS)
wordcloud = WordCloud(width=1600, height=800).generate(text)
plt.figure( figsize=(20,10), facecolor='k')
plt.imshow(wordcloud)
plt.axis("off")
plt.savefig('wordcloud.png', facecolor='k', bbox_inches='tight')
#plt.tight_layout(pad=0)
plt.show()
#plt.savefig('wordcloud.pdf')
#wordcloud.to_file('wordcloud.png')
plt.clf()

clean_df['Message'].count()

top10df = clean_df.groupby("Member")["Message"].count().sort_values(ascending=False)
top10df = top10df.head(10).reset_index()
top10df

top10df['Message']

import seaborn as sns
import matplotlib

sns.set_style("darkgrid")
matplotlib.rcParams['figure.figsize'] = (12, 10)

# A bar plot for top 10 days
sns.barplot(x=top10df.Member, y=top10df.Message, palette="CMRmap",dodge=False).set_xticklabels(rotation=50, labels=top10df.Member)
plt.ylabel("no. of messages")
#plt.show()
plt.savefig('most_active.png')
# Saving the plots
#plt.savefig('top10_days.svg', format = 'svg')

clean_df

from datetime import datetime
drop_ind=[]
def check_datetime_format(datetime_str, format_str):
    try:
        datetime.strptime(datetime_str, format_str)
        return True
    except ValueError:
        return False
for xx in range (len(clean_df)):
  date_string = clean_df['Date'][xx:xx+1].item()

  if check_datetime_format(date_string, "%d/%m/%y"):
    x=0
  else:
    print("Date format is incorrect")
    drop_ind.append(xx)

drop_ind

clean_df.drop(drop_ind, inplace=True)
clean_df = clean_df.reset_index()
clean_df=clean_df.drop(columns='index')

from datetime import datetime, date
clean_df.Date = clean_df.Date.apply(lambda x: datetime.strptime(x, '%d/%m/%y'))
clean_df['day'] = clean_df.Date.apply(lambda x: x.strftime('%A'))
clean_df['month'] = clean_df.Date.apply(lambda x: x.strftime('%B'))
clean_df['year'] = clean_df.Date.apply(lambda x: x.strftime('%Y'))

clean_df_copy=clean_df.copy()

for i in range(clean_df.shape[0]):
    if clean_df.Time[i][-2:].strip(' ') == 'AM':
        if clean_df.Time[i][:3].strip(' ') == '12':
            clean_df.Time[i] = '00' + clean_df.Time[i][3:-6]
            clean_df.Time[i] = clean_df.Time[i].strip(' ')
        else:
            clean_df.Time[i] = clean_df.Time[i][:-6].strip(' ')
    else:
        if clean_df.Time[i][:3].strip(' ') == '12':
            clean_df.Time[i] = clean_df.Time[i][:-6].strip(' ')
        else:
            clean_df.Time[i] = str(int(clean_df.Time[i][:-9]) + 12) + clean_df.Time[i][-9:-6]
            clean_df.Time[i] = clean_df.Time[i].strip(' ')

clean_df

clean_df['hour'] = 0

for i in range(clean_df.shape[0]):
  clean_df.hour[i] = clean_df.Time[i][:-3]

clean_df

from datetime import datetime, date
clean_df.Time = clean_df.Time.apply(lambda x: datetime.strptime(x, '%H:%M'))
clean_df['hour'] = clean_df.Time.apply(lambda x: x.hour)

clean_df

plt.figure(figsize = (10,6))
sns.countplot(x=clean_df['hour'])
plt.savefig('most_active_hour.png')

plt.figure(figsize = (10,6))
sns.countplot(x=clean_df['day'])
plt.savefig('most_active_day_of_week.png')

plt.figure(figsize = (10,6))
sns.countplot(x=clean_df['month'], hue = clean_df['day'])
plt.savefig('most_active_day_of_week_by_month.png')

from textblob import TextBlob

clean_df.iloc[0][3]

clean_df['score'] = 0

polarity_score = []
for i in range(0,clean_df.shape[0]):
    score = TextBlob(clean_df.iloc[i][3])
    score1 = score.sentiment[0]
    polarity_score.append(score1)
    clean_df['score'][i] = score1

#concatenating the score with thw dataframe

clean_df

#pos
len(clean_df[clean_df.score > 0])

print(clean_df[clean_df.score > 0])

print(clean_df[10:11]['Message'].item())

#neg
len(clean_df[clean_df.score < 0])

#nut
len(clean_df[clean_df.score == 0])



#creating a new column to label the sentiment
import numpy as np
filters = [
   (clean_df.score > 0) ,
   (clean_df.score < 0) ,
   (clean_df.score == 0)
]
values = ["Positive", "Negative", "Neutral"]

clean_df["status"] = np.select(filters, values)
clean_df.tail()

count = clean_df['status'].value_counts()
#Using matplotlib donught chart
plt.pie(count, labels = count.index,autopct='%.0f%%',startangle = 90,
        counterclock = False);
plt.title('Message sentiment');
plt.savefig('all_messages_sentiment.png')

count

"""**Why people left**"""

final_df_copy_=final_df.copy()

final_df

final_df

all_left = []
lennn=[]


for num in range(len(final_df)):
  ax=final_df['Message'][num:num+1]
  txt=ax.item()
  try:
    x = txt.find("left")
    if x != -1:
      all_left.append(final_df['Member'][num:num+1])

  except:
    print()

len(all_left)

all_left

message=[]

for i in range(len(all_left)):
  temp_memb = all_left[i].item()

  for num in range(len(final_df)):
    ax=final_df['Member'][num:num+1]
    txt=ax.item()
    txt=str(txt)
    try:
      x = txt.find(temp_memb)
      if x != -1:
        mess=final_df['Message'][num:num+1]
        temp_mess = mess.item()
        message.append(temp_mess)
    except:
      print()

len(message)

my_list = message
single_string = ' '.join([str(item) if item is not None else '' for item in my_list])
print(single_string)

#if len(single_string) == 0 :

from PIL import Image, ImageDraw, ImageFont

# Create a blank image with the desired size and background color
width, height = 1600, 800
background_color = (255, 255, 255)  # RGB color values for white
image = Image.new('RGB', (width, height), background_color)

# Create a drawing object
draw = ImageDraw.Draw(image)

# Specify the text and font properties
text = 'Word Cloud not possible'
font_size = 100
font = ImageFont.truetype('arial.ttf', font_size)

# Calculate the size of the text
text_width, text_height = draw.textsize(text, font=font)

# Calculate the position to center the text
x = (width - text_width) // 2
y = (height - text_height) // 2

# Draw the text on the image
draw.text((x, y), text, font=font, fill=(0, 0, 0))  # RGB color values for black
image.show()
# Save the image to a file
image.save('output.png')

#text = " ".join(i for i in clean_df['Message'])
#stopwords = set(STOPWORDS)
wordcloud = WordCloud(width=1600, height=800).generate(single_string)
plt.figure( figsize=(20,10), facecolor='k')
plt.imshow(wordcloud)
plt.axis("off")
plt.savefig('wordcloud.png', facecolor='k', bbox_inches='tight')
#plt.tight_layout(pad=0)
plt.show()
#plt.savefig('wordcloud.pdf')
#wordcloud.to_file('wordcloud.png')
plt.clf()

why_left = []
for left_l in range(len(all_left)):
  for num in range(len(final_df)):
    ax=final_df['Member'][num:num+1]
    ax=ax.item()
    x = ax.find(all_left[left_l].replace(' left ', ''))
    if x != -1:
      why_left.append(str(final_df['Message'][num:num+1]))


    #if ax == all_left[left_l].replace('left', ' '):

      ##why_left.append(final_df['Message'][num:num+1])
      #print(final_df['Message'][num:num+1])

len(why_left)

why_left = []
for left_l in range(len(all_left)):
  for num in range(len(final_df)):
    ax=final_df['Member'][num:num+1]
    ax=ax.item()
    x = ax.find(all_left[left_l].replace(' left ', ''))
    if x != -1:
      if final_df['Message'][num:num+1].item() == None :
        why_left.append(final_df['Message'][num-1:num])
      else:
        why_left.append(str(final_df['Message'][num:num+1]))


    #if ax == all_left[left_l].replace('left', ' '):

      ##why_left.append(final_df['Message'][num:num+1])
      #print(final_df['Message'][num:num+1])

why_left

polarity_score = []
for i in range(len(message)):
  txt = message[i]
  score = TextBlob(txt)
  score1 = score.sentiment[0]
  polarity_score.append(score1)

polarity_score

polarity_score = pd.DataFrame(polarity_score, columns=['score'])

filters = [
   (polarity_score.score > 0) ,
   (polarity_score.score < 0) ,
   (polarity_score.score == 0)
]
values = ["Positive", "Negative", "Neutral"]

polarity_score["status"] = np.select(filters, values)

count = polarity_score['status'].value_counts()
#Using matplotlib donught chart
plt.pie(count, labels = count.index,autopct='%.0f%%',startangle = 90, counterclock = False);
plt.title('People who left their sentiment');
plt.savefig('People_who_left_their_sentiment.png')
plt.show()

polarity_score

len(message)
polarity_score['message']=message

polarity_score

neg_message=[]
for i in range(len(polarity_score['status'])):

  x = polarity_score[i:i+1]['status'].item()
  if x == 'Negative':
    neg_message.append(polarity_score[i:i+1]['message'].item())

neg_message

neg_message = pd.DataFrame(neg_message)

# Save DataFrame as CSV
df.to_csv('neg_message.csv', index=False)

neg_message

neg_message

count

len(clean_df['Member'].unique())